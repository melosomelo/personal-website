---
import type { CollectionEntry } from "astro:content";

type PostData = CollectionEntry<"blog">["data"];
type Props = {
  publishedAt: PostData["publishedAt"];
  lastEditedAt: PostData["lastEditedAt"];
  readingTime: string;
  title: string;
  rowDisplay?: boolean;
  hideLastEdited?: boolean;
};

const {
  publishedAt,
  lastEditedAt,
  readingTime,
  title,
  rowDisplay,
  hideLastEdited,
} = Astro.props;

const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

const orderSuffix = (date: number) => {
  switch (date % 10) {
    case 1:
      return "st";
    case 2:
      return "nd";
    case 3:
      return "rd";
    default:
      return "th";
  }
};

const publishedDateString = `${
  months[publishedAt.getMonth()]
} ${publishedAt.getDate()}${orderSuffix(
  publishedAt.getDate()
)}, ${publishedAt.getFullYear()}`;

const readingTimeString = readingTime.replace(" read", "");

// last edited at must be dealt with in the client, as the string
// is relative to the day the user opens the post.
---

<style>
  .meta {
    font-size: 1.2rem;
    color: var(--medium-gray);

    display: flex;
    flex-direction: column;
  }

  .meta.row {
    flex-direction: row;
  }

  .meta.row > * + * {
    margin-top: 0;
    margin-left: 1.6rem;
  }

  .meta > * {
    display: flex;
    align-items: center;
  }

  .meta > * + * {
    margin-top: 1rem;
  }

  .meta svg {
    margin-right: 0.8rem;
  }

  .meta svg path {
    fill: var(--medium-gray);
  }

  html.dark .meta {
    color: var(--dark-gray);
  }

  html.dark .meta svg path {
    fill: var(--dark-gray) !important;
  }

  @media screen and (min-width: 800px) {
    .meta {
      font-size: 1.5rem;
      flex-direction: row;
    }

    .meta > * + * {
      margin-top: 0;
      margin-left: 3rem;
    }
  }
</style>

<div class:list={["meta", { row: rowDisplay }]}>
  <div title="Published at">
    <svg
      width="18"
      height="19"
      viewBox="0 0 18 19"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M3.975 16.625C3.6 16.625 3.28125 16.4938 3.01875 16.2313C2.75625 15.9688 2.625 15.65 2.625 15.275V5.225C2.625 4.85 2.75625 4.53125 3.01875 4.26875C3.28125 4.00625 3.6 3.875 3.975 3.875H5.025V2.28125H6.16875V3.875H11.85V2.28125H12.975V3.875H14.025C14.4 3.875 14.7188 4.00625 14.9813 4.26875C15.2438 4.53125 15.375 4.85 15.375 5.225V15.275C15.375 15.65 15.2438 15.9688 14.9813 16.2313C14.7188 16.4938 14.4 16.625 14.025 16.625H3.975ZM3.975 15.5H14.025C14.075 15.5 14.125 15.475 14.175 15.425C14.225 15.375 14.25 15.325 14.25 15.275V8.225H3.75V15.275C3.75 15.325 3.775 15.375 3.825 15.425C3.875 15.475 3.925 15.5 3.975 15.5ZM3.75 7.1H14.25V5.225C14.25 5.175 14.225 5.125 14.175 5.075C14.125 5.025 14.075 5 14.025 5H3.975C3.925 5 3.875 5.025 3.825 5.075C3.775 5.125 3.75 5.175 3.75 5.225V7.1Z"
      ></path>
    </svg>
    <span>{publishedDateString}</span>
  </div>
  <div title="Reading time">
    <svg
      width="18"
      height="19"
      viewBox="0 0 18 19"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <mask
        id="mask0_20_349"
        style="mask-type:alpha"
        maskUnits="userSpaceOnUse"
        x="0"
        y="0"
        width="18"
        height="19"
      >
        <rect y="0.5" width="18" height="18" fill="#D9D9D9"></rect>
      </mask>
      <g mask="url(#mask0_20_349)">
        <path
          d="M11.475 13.025L12.525 11.975L9.75 9.2V5.75H8.25V9.8L11.475 13.025ZM9 17C7.9625 17 6.9875 16.803 6.075 16.409C5.1625 16.0155 4.36875 15.4813 3.69375 14.8063C3.01875 14.1313 2.4845 13.3375 2.091 12.425C1.697 11.5125 1.5 10.5375 1.5 9.5C1.5 8.4625 1.697 7.4875 2.091 6.575C2.4845 5.6625 3.01875 4.86875 3.69375 4.19375C4.36875 3.51875 5.1625 2.98425 6.075 2.59025C6.9875 2.19675 7.9625 2 9 2C10.0375 2 11.0125 2.19675 11.925 2.59025C12.8375 2.98425 13.6313 3.51875 14.3063 4.19375C14.9813 4.86875 15.5155 5.6625 15.909 6.575C16.303 7.4875 16.5 8.4625 16.5 9.5C16.5 10.5375 16.303 11.5125 15.909 12.425C15.5155 13.3375 14.9813 14.1313 14.3063 14.8063C13.6313 15.4813 12.8375 16.0155 11.925 16.409C11.0125 16.803 10.0375 17 9 17ZM9 15.5C10.6625 15.5 12.0782 14.9158 13.2472 13.7472C14.4158 12.5782 15 11.1625 15 9.5C15 7.8375 14.4158 6.42175 13.2472 5.25275C12.0782 4.08425 10.6625 3.5 9 3.5C7.3375 3.5 5.922 4.08425 4.7535 5.25275C3.5845 6.42175 3 7.8375 3 9.5C3 11.1625 3.5845 12.5782 4.7535 13.7472C5.922 14.9158 7.3375 15.5 9 15.5Z"
          fill="#AEAEAE"></path>
      </g>
    </svg>
    <span>{readingTimeString}</span>
  </div>
  {
    lastEditedAt && !hideLastEdited && (
      <div title="Last edited at">
        <svg
          width="18"
          height="19"
          viewBox="0 0 18 19"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <mask
            id="mask0_20_348"
            style="mask-type:alpha"
            maskUnits="userSpaceOnUse"
            x="0"
            y="0"
            width="18"
            height="19"
          >
            <rect y="0.5" width="18" height="18" fill="#D9D9D9" />
          </mask>
          <g mask="url(#mask0_20_348)">
            <path
              d="M3.86252 14.75H4.80002L11.7375 7.81252L10.8188 6.87502L3.86252 13.8313V14.75ZM14.1375 6.98752L11.6063 4.47502L12.5813 3.50002C12.8063 3.28752 13.0783 3.18127 13.3973 3.18127C13.7158 3.18127 13.9813 3.28752 14.1938 3.50002L15.1125 4.41877C15.325 4.64377 15.4375 4.90927 15.45 5.21527C15.4625 5.52177 15.3563 5.78127 15.1313 5.99377L14.1375 6.98752ZM13.3313 7.81252L5.26877 15.875H2.73752V13.3438L10.8 5.28127L13.3313 7.81252ZM11.2688 7.34377L10.8188 6.87502L11.7375 7.81252L11.2688 7.34377Z"
              fill="#AEAEAE"
            />
          </g>
        </svg>
        <span class={`${title}-last-edited-at`} />
      </div>
    )
  }
</div>
<script
  define:vars={{
    hideLastEdited,
    lastEditedAt,
    spanClassName: `${title}-last-edited-at`,
  }}
>
  function equalDates(date1, date2) {
    return (
      date1.getDate() === date2.getDate() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getFullYear() === date2.getFullYear()
    );
  }

  function roundToHighestTimeUnit(daysElapsed) {
    const units = [
      { name: "week", daysInUnit: 7 },
      { name: "month", daysInUnit: 30 },
      { name: "year", daysInUnit: 365 },
    ];
    let result = { unit: "day", amount: Math.floor(daysElapsed) };
    for (let unit of units) {
      if (daysElapsed / unit.daysInUnit >= 1) {
        result = {
          unit: unit.name,
          amount: Math.floor(daysElapsed / unit.daysInUnit),
        };
      }
    }
    return result;
  }

  if (lastEditedAt && !hideLastEdited) {
    const today = new Date();
    const lastEditDate = new Date(lastEditedAt);
    const relativeTimeOfLastEdit = (() => {
      // Deal with special cases (today and yesterday).
      if (equalDates(today, lastEditDate)) {
        return "today";
      }
      const tempDate = new Date(today);
      tempDate.setDate(tempDate.getDate() - 1);
      if (equalDates(tempDate, lastEditDate)) {
        return "yesterday";
      }
      // If none happen, then we round up to the highest possible
      // time unit (weeks, months and years).
      const daysElapsed = Math.max(
        2,
        (today.getTime() - lastEditDate.getTime()) / (1000 * 60 * 60 * 24)
      );
      const timeElapsed = roundToHighestTimeUnit(daysElapsed);
      return `${timeElapsed.amount} ${timeElapsed.unit}${
        timeElapsed.amount > 1 ? "s" : ""
      } ago`;
    })();

    Array.from(document.getElementsByClassName(spanClassName)).forEach(
      (el) => (el.textContent = `Laste edited ${relativeTimeOfLastEdit}`)
    );
  }
</script>
